;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 16.09.2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny13
;AVR Core Clock frequency: 4,800000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;*****************************************************/
;
;#include <tiny13.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;#include <delay.h>
;int j=0, i=0;
;
;void Bip()
; 0000 001D   {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 001E     if (j>3)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F             {
; 0000 0020               j = 0;
;PCODE: $0000000F VOL: 0
; 0000 0021                 delay_ms(500);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0022              }
; 0000 0023            else
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0024              {
; 0000 0025                PORTB.4 = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0026                 delay_ms(100);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0027                 PORTB.4 = 1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0028                 delay_ms(50);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0029                 j++;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002A               }
;PCODE: $00000022 VOL: 0
; 0000 002B   }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)
; 0000 002F {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0030     i++;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0031 
; 0000 0032 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0038 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0039 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003A // Delay needed for the stabilization of the ADC input voltage
; 0000 003B delay_us(10);
;PCODE: $00000032 VOL: 0
; 0000 003C // Start the AD conversion
; 0000 003D ADCSRA|=0x40;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003E // Wait for the AD conversion to complete
; 0000 003F while ((ADCSRA & 0x10)==0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0040 ADCSRA|=0x10;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0041 return ADCW;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0042 }
;PCODE: $00000040 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0047 {
;PCODE: $00000041 VOL: 0
; 0000 0048 // Declare your local variables here
; 0000 0049 
; 0000 004A // Crystal Oscillator division factor: 1
; 0000 004B #pragma optsize-
; 0000 004C CLKPR=0x80;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004D CLKPR=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004E #ifdef _OPTIMIZE_SIZE_
; 0000 004F #pragma optsize+
; 0000 0050 #endif
; 0000 0051 
; 0000 0052 // Input/Output Ports initialization
; 0000 0053 // Port B initialization
; 0000 0054 // Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0055 // State5=T State4=0 State3=T State2=T State1=T State0=P
; 0000 0056 PORTB=0x01;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0057 DDRB=0x10;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0058 
; 0000 0059 // Timer/Counter 0 initialization
; 0000 005A // Clock source: System Clock
; 0000 005B // Clock value: 4,688 kHz
; 0000 005C // Mode: CTC top=OCR0A
; 0000 005D // OC0A output: Disconnected
; 0000 005E // OC0B output: Disconnected
; 0000 005F 
; 0000 0060 TCNT0=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0061 OCR0A=0xFF;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0062 OCR0B=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0063 
; 0000 0064 // External Interrupt(s) initialization
; 0000 0065 // INT0: Off
; 0000 0066 // Interrupt on any change on pins PCINT0-5: Off
; 0000 0067 GIMSK=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0068 MCUCR=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0069 
; 0000 006A // Timer/Counter 0 Interrupt(s) initialization
; 0000 006B TIMSK0=0x04;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006C 
; 0000 006D // Analog Comparator initialization
; 0000 006E // Analog Comparator: Off
; 0000 006F ACSR=0x80;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0070 ADCSRB=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0071 DIDR0=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0072 
; 0000 0073 // ADC initialization
; 0000 0074 // ADC Clock frequency: 600,000 kHz
; 0000 0075 // ADC Bandgap Voltage Reference: Off
; 0000 0076 // ADC Auto Trigger Source: ADC Stopped
; 0000 0077 // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: On
; 0000 0078 DIDR0&=0x03;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0079 DIDR0|=0x34;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 007A ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007B ADCSRA=0x83;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 007C 
; 0000 007D // Global enable interrupts
; 0000 007E #asm("sei")
;PCODE: $00000066 VOL: 0
	sei
;PCODE: $00000067 VOL: 0
; 0000 007F PORTB.4=1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0080 
; 0000 0081 while (1)
;PCODE: $0000006A VOL: 0
; 0000 0082       {
; 0000 0083          if (PINB.0==1)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0084          {
; 0000 0085             TCCR0A=0x02;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0086             TCCR0B=0x05;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0087             if (i>read_adc(3)*3)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0088             {
; 0000 0089                Bip();
;PCODE: $00000079 VOL: 0
; 0000 008A              }
; 0000 008B 
; 0000 008C           }
;PCODE: $0000007A VOL: 0
; 0000 008D         else
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 008E         {
; 0000 008F            TCCR0A=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0090            TCCR0B=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0091            PORTB.4=1;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0092            i=0;
;PCODE: $00000083 VOL: 0
; 0000 0093         }
;PCODE: $00000084 VOL: 0
; 0000 0094       }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0095 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
